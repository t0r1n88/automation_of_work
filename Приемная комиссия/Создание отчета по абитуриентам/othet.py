import pandas as pd
import numpy as np
from datetime import date
# Отключение предупреждений анаконды
import warnings

warnings.filterwarnings('ignore')
# Обработка файла excel
# Обработка файла excel
# Считывает с листа под названием Абитуриенты, начиная с 8 строчки. Вариант со всеми специальностями,включая заочников
#d = pd.read_excel('1.xls',index_col='№',sheet_name='Абитуриенты',header=8)
# Вариант без заочников
d = pd.read_excel('1.xls',index_col='№',sheet_name='Абитуриенты',header=9)
# Создаем датасет с наименованием специальностей и планом набора
base_df = pd.read_excel('plan.xls')
# Отбираем нужные столбцы
df = d[['Направление, специальность, профессия','Формирующее подр.','Льготы','Нуждается в общежитии',
        'Сдан оригинал','Особое право','Итоговое согласие']]

# Переименовыем колонки
df.rename(columns={'Направление, специальность, профессия':'Направление','Формирующее подр.':'Отделение',
                   'Нуждается в общежитии':'Нуждается_в_общежитии','Сдан оригинал':'Сдан_оригинал',
                   'Особое право':'Особое_право','Итоговое согласие':'Итоговое_согласие'},inplace=True)
# Заполняем NaN
df.fillna('нет',inplace=True)
# Конвертируем значения нет и да, в 0 или 1
df['Льготы'] = df['Льготы'].map({'да':1,'нет':0})
df['Нуждается_в_общежитии'] = df['Нуждается_в_общежитии'].map({'да':1,'нет':0})
df['Сдан_оригинал'] = df['Сдан_оригинал'].map({'да':1,'нет':0})
df['Особое_право'] = df['Особое_право'].map({'да':1,'нет':0})
df['Итоговое_согласие'] = df['Итоговое_согласие'].map({'да':1,'нет':0})
# Количество поданных заявлений.давай не будем пытаться усложнять, делай по кусочку
count_statement = df.groupby(['Отделение','Направление'],as_index=False)[['Льготы']].count()
# переименовываем колонки
count_statement.columns=['Отделение','Направление','Число_поданных_заявлений']
#Соединяем дата сеты
plan_real_df=base_df.merge(count_statement,on=['Отделение','Направление'],how='outer')
# Суммируем показатели
other_value_df = df.groupby(['Отделение','Направление',],as_index=False).sum()
 # датафрейм содержащий все нужные данные
all_value_df = plan_real_df.merge(other_value_df,how='outer')
# Осталось привести значения к инту
pre_df = all_value_df.copy()
# заполняем наны
pre_df.fillna(0.0,inplace=True)
# Список колонок которые нужно привести к инту
lst = ['План', 'Число_поданных_заявлений',
       'Льготы', 'Нуждается_в_общежитии', 'Сдан_оригинал', 'Особое_право',
       'Итоговое_согласие']
# Перебираем и конвертируем
for value in lst:
    pre_df[value] = pre_df[value].astype(int)
# Сводный отчет по отделениям
svod_df = pre_df.groupby('Отделение').sum()
svod_df.to_excel(f'Сводный отчет {date.today()}.xlsx')
# Отсотртировать по столбцу Число поданых заявлений
export_df = pre_df.sort_values('Число_поданных_заявлений',ascending=False)
# Экспортируем в эксель
export_df.to_excel(f'Отчет {date.today()}.xlsx')